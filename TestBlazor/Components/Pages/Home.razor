@page "/home"
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using BankApi
@inject HttpClient Http
@inject IJSRuntime JS

<body>
    <div class="main-body">
        <h3>Your current balance: @curBalance @curCurrency </h3>

        <div class='container'>
            <button @onclick="NavigateToTransaction" type="button">New transaction</button>
            <button @onclick="NavigateToCurrency" type="button">Change currency</button>
            <button @onclick="NavigateToHistory" type="button">History</button>
        </div>

        <article>
            <h3>Accounts</h3>
            <div class='account-container'>
                <button @onclick="AddFriend" class="Add-friend">Add Friend</button>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
            </div>
        </article>

        <div class="Payment-history">
            <h4>Received Transactions</h4>
            @foreach (var tx in SentTabs)
            {
                <TestBlazor.Components.Layout.HistoryTab Amount=@tx.Amount
                                                         destination=@tx.Destination
                                                         addreser=@tx.Addreser
                                                         descryption=@tx.Descryption />
            }

            <h4>Send Transactions</h4>
            @foreach (var tx in ReceivedTabs)
            {
                <TestBlazor.Components.Layout.HistoryTab Amount=@tx.Amount
                                                         destination=@tx.Destination
                                                         addreser=@tx.Addreser
                                                         descryption=@tx.Descryption />
            }
        </div>
    </div>
</body>

@code {
    decimal curBalance = 0;
    string curCurrency = "USD";
    private bool initialized = false;

    List<TransactionDTO> sentTransactions = new();
    List<TransactionDTO> receivedTransactions = new();

    List<HistoryTabData> SentTabs = new();
    List<HistoryTabData> ReceivedTabs = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;
            await GetCurrentBalance();
            StateHasChanged(); // Refresh view
        }
    }

    async Task GetCurrentBalance()
    {
        var login = await JS.InvokeAsync<string>("localStorage.getItem", "login");
        if (string.IsNullOrWhiteSpace(login))
        {
            Console.WriteLine("Login not found in localStorage");
            return;
        }

        var userIdResponse = await Http.GetFromJsonAsync<UserIdResponse>($"BankApi/account/{login}/getlogin");
        if (userIdResponse == null)
        {
            Console.WriteLine("User ID not found.");
            return;
        }

        var accountId = await Http.GetFromJsonAsync<AccountID>($"BankApi/account/{userIdResponse.id}/getID");
        if (accountId == null)
        {
            Console.WriteLine("Account ID not found.");
            return;
        }

        await LoadTransactions(accountId.id);

        var balanceResponse = await Http.GetFromJsonAsync<BalanceResponse>($"BankApi/transaction/{accountId.id}/getbalance");
        curBalance = balanceResponse?.balance ?? 0;
    }

    async Task LoadTransactions(int accountId)
    {
        var response = await Http.GetFromJsonAsync<TransactionResponse>($"BankApi/transaction/{accountId}/get");
        if (response == null) return;

        sentTransactions = response.Sent ?? new();
        receivedTransactions = response.Received ?? new();

        SentTabs = new();
        foreach (var tx in sentTransactions)
        {
            SentTabs.Add(new HistoryTabData
                {
                    Amount = tx.amount,
                    Destination = "to",
                    Addreser = await FromIDtoText(tx.SendAccountId),
                    Descryption = tx.descryption
                });
        }

        ReceivedTabs = new();
        foreach (var tx in receivedTransactions)
        {
            ReceivedTabs.Add(new HistoryTabData
                {
                    Amount = tx.amount,
                    Destination = "from",
                    Addreser = await FromIDtoText(tx.ReciveAccountId),
                    Descryption = tx.descryption
                });
        }
    }

    async Task<string> FromIDtoText(int sender)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<EmailResponse>($"BankApi/account/{sender}/getemail");
            return response?.email ?? "unknown";
        }
        catch
        {
            return "error";
        }
    }

    private void NavigateToTransaction() => NavigationManager.NavigateTo("/transaction");
    private void NavigateToCurrency() => NavigationManager.NavigateTo("/currency");
    private void NavigateToHistory() => NavigationManager.NavigateTo("/history");
    private void AddFriend() => NavigationManager.NavigateTo("/addfriend");

    public class EmailResponse
    {
        public string email { get; set; }
    }

    public class HistoryTabData
    {
        public decimal Amount { get; set; }
        public string Destination { get; set; }
        public string Addreser { get; set; }
        public string Descryption { get; set; }
    }

    public class UserIdResponse
    {
        public int id { get; set; }
    }

    public class AccountID
    {
        public int id { get; set; }
    }

    public class BalanceResponse
    {
        public decimal balance { get; set; }
    }
}
