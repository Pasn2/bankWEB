@page "/home"
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using BankApi
@inject HttpClient Http
@inject IJSRuntime JS
<body>
    <div class="main-body">
        <h3>Your current balance: @curBalance @curCurrency </h3>
        <div class='container'>
            <button @onclick="NavigateToTransaction" type="button">New transaction</button>
            <button @onclick="NavigateToCurrency" type="button">Change currency</button>
            <button @onclick="NavigateToHistory" type="button">History</button>
        </div>
        <article>
            <h3>Accounts</h3>
            <div class='account-container'>
                <button @onclick="AddFriend" class="Add-friend">Add Friend</button>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
                <TestBlazor.Components.Layout.Account></TestBlazor.Components.Layout.Account>
            </div>
        </article>
        <div class="Payment-history">
            <h4>Sent Transactions</h4>
            @foreach (TransactionDTO tx in sentTransactions)
            {
                <HistoryTab Amount=(int)tx.Amount />
            }

            <h4>Received Transactions</h4>
            @foreach (TransactionDTO tx in receivedTransactions)
            {
                <div>
                     Kwota: @tx.amount, Od: @tx.SendAccountId, Opis: @tx.descryption
                </div>
            }
        </div>

    </div>
</body>

@code
{
    decimal curBalance = 0; 
    string curCurrency = "USD";
    private bool initialized = false;
    List<TransactionDTO> sentTransactions = new();
    List<TransactionDTO> receivedTransactions = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("CWEL");
        if (firstRender && !initialized)
        {
            Console.WriteLine("CWELEEE");
            initialized = true;

            await GetCurrentBalance();
            StateHasChanged(); // Odświeżenie widoku po pobraniu danych
        }
    }
    async Task LoadTransactions(int accountId)
    {
        var response = await Http.GetFromJsonAsync<TransactionResponse>($"BankApi/transaction/{accountId}/get");

        var sentTransactionsvar = response.Sent;
        var receivedTransactionsvar = response.Received;
        Console.WriteLine($"SENT: {response?.Sent?.Count}, RECEIVED: {response?.Received[0].amount}");
        sentTransactions = sentTransactionsvar;
        receivedTransactions = receivedTransactionsvar;
    }
    async Task GetCurrentBalance()
    {
        Console.WriteLine("DAWDAW");
        var login = await JS.InvokeAsync<string>("localStorage.getItem", "login");
        Console.WriteLine(login + "DADA");
        var userResponse = await Http.GetStringAsync($"BankApi/account/{login}/getlogin");
        Console.WriteLine($"RAW: {userResponse}");
        var usertId = await Http.GetFromJsonAsync<UserIdResponse>($"BankApi/account/{login}/getlogin");
        Console.WriteLine(usertId.id + "PAPA");
        
        var accountId = await Http.GetFromJsonAsync<AccountID>($"BankApi/account/{usertId.id}/getID");
        Console.WriteLine(accountId.id + "CADA");
        var url = $"BankApi/transaction/{accountId.id}/getbalance";
        await LoadTransactions(accountId.id);
        StateHasChanged();
        var response = await Http.GetFromJsonAsync<BalanceResponse>(url);
        curBalance = response.balance;
        
    }
    private void NavigateToTransaction()
    {
        NavigationManager.NavigateTo("/transaction");
    }
    private void NavigateToCurrency()
    {
        NavigationManager.NavigateTo("/currency");
    }
    private void NavigateToHistory()
    {
        NavigationManager.NavigateTo("/history");
    }
    private void AddFriend()
    {
        NavigationManager.NavigateTo("/addfriend");
    }
}